[{"_id":"b337366cffa93d04544444a0c6507481","title":"Conexion a base de datos Mysql","tech":"Node","use":"const util = require('util');\nconst mysql = require('mysql');\n//database conexion y configuracion\nvar database = mysql.createConnection({\n        host: \"localhost\",\n        user: \"root\",\n        password: \"\",\n        database:\"form_node\"\n});\n\ndatabase.connect(function(err) {\n    if (err) throw err;\n    console.log(\"Connected!\");\n});\n\ndatabase.query=util.promisify(database.query);\nmodule.exports= database;","description":"Conexion a base de datos Mysql con express.","search":"mysql connection, database connection, conexion a mysql", "type":"Express"},{"_id":"d67fb7092a7d03c471029a4f3cc47b93","title":"Crear una base de datos mysql.","tech":"SQL","use":"CREATE DATABASE form_node;\n\n-- to use database\nuse form_node;\n\n-- creating a new table\nCREATE TABLE users (\n  id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  adress VARCHAR(100) NOT NULL,\n  email VARCHAR(50) NOT NULL,\n  password VARCHAR(100)\n);\n\n-- to show all tables\nshow tables;\n\n-- to describe table\ndescribe users;","description":"Crea una base de datos mysql desde el shell de mysql.","search":"Crear base de datos mysql, create mysql database", "type":"SQL Shell"},{"_id":"e6db4edc02990ad55405e6e9a5b8adad","title":"Dockerfile para un sitio web estatico.","tech":"Docker","use":"FROM nginx:latest\n\nWORKDIR /usr/share/nginx/html\n\nCOPY . .","description":"Configuracion del Dockerfile para un sitio web estatico utilizando nginx como servidor.","search":"Dockerfile para un sitio web estatico", "type":"Dockerfile"},{"_id":"6108a3d17c340588af1aa006b5b21665","title":"Conexion a base de datos mongodb","tech":"Node","use":"var mongoDB = `mongodb+srv://${process.env.NAME}:${process.env.KEY}@cluster0.jofqj.mongodb.net/message_board?retryWrites=true&w=majority`;\nmongoose.connect(mongoDB, { useNewUrlParser: true , useUnifiedTopology: true});\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));","description":"Conexion a base de datos mongodb con express y mongoose.","search":"Conexion a base de datos mongodb, mongo database connection", "type":"Express"},{"_id":"6cfab7b949ee638b1b125b17eaa5f09b","title":"Esquema de mongoose","tech":"Node","use":"  \nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\n\nconst MessageSchema = Schema({\n  text: {type: String, required: true},\n  image:String,\n  user: {type: String, required: true},\n  added: { type: Date, default: Date.now },\n  \n});\n\nmodule.exports = mongoose.model('message', MessageSchema);","description":"Ejemplo de esquema de mongoose para base de datos mongo.","search":"Esquema mongoose, mongoose schema", "type":""},{"_id":"7c668883f8de8641786dff7554abf7cb","title":"Get request a API desde Node","tech":"Node","use":"const https = require('https');\n\nhttps.get('https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY', (resp) =&gt; {\n  let data = '';\n\n  // A chunk of data has been received.\n  resp.on('data', (chunk) =&gt; {\n    data += chunk;\n  });\n\n  // The whole response has been received. Print out the result.\n  resp.on('end', () =&gt; {\n    console.log(JSON.parse(data).explanation);\n  });\n\n}).on(\"error\", (err) =&gt; {\n  console.log(\"Error: \" + err.message);\n});","description":"Get request a API desde Node.","search":"get request, https.get" , "type":""}]